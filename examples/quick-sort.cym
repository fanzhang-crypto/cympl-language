#! cympl interpret

int[] quickSort(int[] arr) {
    void swap(int[] arr, int i, int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    int partition(int[] arr, int low, int high)
    {
        int pivot = arr[high]; // pivot
        int i = low - 1;
        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i = i + 1;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return i + 1;
    }

    void quickSortInternal(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSortInternal(arr, low, pi - 1);
            quickSortInternal(arr, pi + 1, high);
        }
    }

    quickSortInternal(arr, 0, arr.length - 1);
    return arr;
}

println(quickSort([2,3,9,1,11,32,17,23,15,21]));
